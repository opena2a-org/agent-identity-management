version: '3.9'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: aim-postgres
    environment:
      POSTGRES_DB: identity
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d identity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Redis Cache (no password for local development)
  redis:
    image: redis:7-alpine
    container_name: aim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Elasticsearch for audit logs and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: aim-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - aim-network

  # MinIO for object storage (certificates, documents)
  minio:
    image: minio/minio:latest
    container_name: aim-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: aim_minio_user
      MINIO_ROOT_PASSWORD: aim_minio_password_dev
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - aim-network

  # NATS JetStream for messaging
  nats:
    image: nats:2-alpine
    container_name: aim-nats
    command: "--jetstream --store_dir=/data"
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aim-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aim-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3003
    ports:
      - "3003:3000"
    volumes:
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: aim-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aim-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: aim-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./infrastructure/monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - promtail_data:/promtail
    depends_on:
      - loki
    networks:
      - aim-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  nats_data:
  prometheus_data:
  grafana_data:
  loki_data:
  promtail_data:

networks:
  aim-network:
    driver: bridge
